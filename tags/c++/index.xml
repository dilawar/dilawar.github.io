<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C++ on Dilawar's Blog</title><link>https://dilawar.github.io/tags/c++/</link><description>Recent content in C++ on Dilawar's Blog</description><generator>Hugo</generator><language>en-us</language><copyright>Â© 2021, Dilawar Singh</copyright><lastBuildDate>Fri, 26 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://dilawar.github.io/tags/c++/index.xml" rel="self" type="application/rss+xml"/><item><title>Put default arguments on function declaration</title><link>https://dilawar.github.io/posts/2021/2021-11-26-where-to-put-default-argument-declaration-definition-c++/</link><pubDate>Fri, 26 Nov 2021 00:00:00 +0000</pubDate><guid>https://dilawar.github.io/posts/2021/2021-11-26-where-to-put-default-argument-declaration-definition-c++/</guid><description>&lt;p>Default parameter values arguably are better suited on the declaration since that
is the only thing that a caller always sees.&lt;/p>
&lt;p>You &lt;em>can&lt;/em> have the argument on the definition as well but if you put it on
the definition then only those who see the definition would be able to use
the default value (&lt;a href="https://stackoverflow.com/questions/1142209/what-if-the-default-parameter-value-is-defined-in-code-not-visible-at-the-call-s">https://stackoverflow.com/questions/1142209/what-if-the-default-parameter-value-is-defined-in-code-not-visible-at-the-call-s&lt;/a>).&lt;/p>
&lt;p>ðŸš© &lt;strong>You can not have default values on both declaration and definition.&lt;/strong>
I don&amp;rsquo;t know why this is the case. My guess is that if default values are different
in one place then they will be issues.&lt;/p></description></item><item><title>An Example of Boost Fiber</title><link>https://dilawar.github.io/posts/2021/2021-11-14-example-boost-fiber/</link><pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate><guid>https://dilawar.github.io/posts/2021/2021-11-14-example-boost-fiber/</guid><description>&lt;p>A fiber is &lt;em>just a thread implemented in user space&lt;/em>.&lt;/p>
&lt;p>Fibers are easier to reason about and have advantages such as much cheaper
context switching.Â  Fibers are very well suited for handling concurrent IO
operations. In such situations a processor mostly wait for the data to become
available and threads usually have pretty big context switching cost. So
multiple fibers running in a single thread is an effective solution.&lt;/p>
&lt;p>It is also much easier to reason about concurrency with fibers. Watch this
great talk by Nat Goldman onÂ  &lt;a href="https://youtu.be/e-NUmyBou8Q">Youtube&lt;/a>.&lt;/p></description></item></channel></rss>