<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python-like-split-in-haskell on Dilawar's Blog</title><link>https://dilawar.github.io/tags/python-like-split-in-haskell/</link><description>Recent content in python-like-split-in-haskell on Dilawar's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 15 Apr 2012 00:00:00 +0000</lastBuildDate><atom:link href="https://dilawar.github.io/tags/python-like-split-in-haskell/index.xml" rel="self" type="application/rss+xml"/><item><title>Python like string split in Haskell</title><link>https://dilawar.github.io/posts/2012/2012-04-15-python-like-string-split-in-haskell/</link><pubDate>Sun, 15 Apr 2012 00:00:00 +0000</pubDate><guid>https://dilawar.github.io/posts/2012/2012-04-15-python-like-string-split-in-haskell/</guid><description>Following function split a string into a list of strings at a given string. For example split &amp;ldquo;dilawar raw war&amp;rdquo; &amp;ldquo;aw&amp;rdquo; returns [&amp;ldquo;dil&amp;rdquo;, &amp;ldquo;ar r&amp;rdquo; &amp;quot; war&amp;quot;]
split :: String -&amp;gt; String -&amp;gt; [String] split str pat = helper str pat [] [] where helper :: String -&amp;gt; String -&amp;gt; String -&amp;gt; String -&amp;gt; [String] helper [] ys n m = [n] ++ [] helper xs [] n m = [n] ++ (split xs pat) helper (x:xs) (y:ys) n m | x /= y = helper (xs) pat ((n++m)++[x]) m | otherwise = helper xs ys n (m++[y])</description></item></channel></rss>