<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on Dilawar's Blog</title><link>https://dilawar.github.io/tags/python/</link><description>Recent content in Python on Dilawar's Blog</description><generator>Hugo</generator><language>en-us</language><copyright>Â© 2021, Dilawar Singh</copyright><lastBuildDate>Thu, 12 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://dilawar.github.io/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>argmax in pure Python</title><link>https://dilawar.github.io/posts/2020/2020-11-12-argmax-in-pure-python/</link><pubDate>Thu, 12 Nov 2020 00:00:00 +0000</pubDate><guid>https://dilawar.github.io/posts/2020/2020-11-12-argmax-in-pure-python/</guid><description>&lt;p>Python does not have an inbuilt &lt;code>argmax&lt;/code> function. &lt;code>numpy&lt;/code> does.&lt;/p>
&lt;p>Here is one implementation.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">argmax&lt;/span>(ls : list) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> int:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _m, _mi &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>math&lt;span style="color:#f92672">.&lt;/span>inf, &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#75715e"># requires `import math` at top&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i, v &lt;span style="color:#f92672">in&lt;/span> enumerate(ls):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> v &lt;span style="color:#f92672">&amp;gt;&lt;/span> _m:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _m &lt;span style="color:#f92672">=&lt;/span> v
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _mi &lt;span style="color:#f92672">=&lt;/span> i
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> _mi
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There is also a one-liner which I often use: &lt;code>max(zip(ls, range(len(ls))))[1]&lt;/code> where &lt;code>ls&lt;/code> is the input list. To my surprise, the one liner is slower than &lt;code>argmax&lt;/code> defined above (Python3.9 on openSUSE-Tumbleweed/Intel).&lt;/p></description></item><item><title>Debugging python extension in gdb</title><link>https://dilawar.github.io/posts/2020/2020-11-03-debugging-python-extension-in-gdb/</link><pubDate>Tue, 03 Nov 2020 00:00:00 +0000</pubDate><guid>https://dilawar.github.io/posts/2020/2020-11-03-debugging-python-extension-in-gdb/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ gdb -ex r --args python myscript.py
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you are using virtual environment then you are likely to run into the following error.&lt;/p>
&lt;p>&lt;code>/home/dilawars/PY38/shims/python&amp;quot;: not in executable format: File format not recognized&lt;/code>&lt;/p>
&lt;p>Because, in virtualenv, the command &lt;code>python&lt;/code> is a bash script wrapping the real python executable. To bypass this, just do the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ gdb -ex r --args bash python myscript.py
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>In Python3, converting slice to range</title><link>https://dilawar.github.io/posts/2020/2020-10-08-python3-slice-to-range/</link><pubDate>Thu, 08 Oct 2020 00:00:00 +0000</pubDate><guid>https://dilawar.github.io/posts/2020/2020-10-08-python3-slice-to-range/</guid><description>&lt;p>If you want to override &lt;code>[]&lt;/code> operator in Python, you may need to handle &lt;code>slice&lt;/code> as well. For example in the following &lt;code>__getindex__&lt;/code> method which implements &lt;code>[]&lt;/code>, argument &lt;code>key&lt;/code> could be a single &lt;code>int&lt;/code>, for example, &lt;code>a[1]&lt;/code> or &lt;code>a[-3]&lt;/code>; or it could be a &lt;code>slice&lt;/code> e.g., &lt;code>a[1:4]&lt;/code> is a slice.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> __getitem__(self, key): 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#ae81ff">2&lt;/span>,&lt;span style="color:#ae81ff">3&lt;/span>,&lt;span style="color:#ae81ff">4&lt;/span>,&lt;span style="color:#ae81ff">5&lt;/span>,&lt;span style="color:#ae81ff">6&lt;/span>] &lt;span style="color:#75715e"># fixed data&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> isinstance(key, slice): 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> [x[i] &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> slice2range(slice, len(x)] 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> x[key]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ideally, I\&amp;rsquo;d have loved if &lt;code>range(key)&lt;/code> would automatically turn/cast a &lt;code>slice&lt;/code> to the equivalent &lt;code>range&lt;/code>. See this &lt;a href="https://stackoverflow.com/questions/13855288/turn-slice-into-range">question on SO&lt;/a>.&lt;/p></description></item><item><title>Managing multiple versions of Python using pyenv</title><link>https://dilawar.github.io/posts/2020/2020-09-28-managing-different-versions-of-python-using-pyenv/</link><pubDate>Mon, 28 Sep 2020 00:00:00 +0000</pubDate><guid>https://dilawar.github.io/posts/2020/2020-09-28-managing-different-versions-of-python-using-pyenv/</guid><description>&lt;p>I recently discovered &lt;a href="https://github.com/pyenv/pyenv">pyenv&lt;/a>. I think it&amp;rsquo;s cool. It lets me setting up Python version easily on my Linux box.&lt;/p>
&lt;p>It is &lt;em>not&lt;/em> written in Python and it is not installable using &lt;code>pip&lt;/code>. Executing &lt;code>pip install pyenv&lt;/code> in terminal didn&amp;rsquo;t work for me.&lt;/p>
&lt;p>I used the system package manager to install it: &lt;code>sudo zypper install pyenv&lt;/code> (on OpenSUSE).&lt;/p>
&lt;p>Here is &lt;code>$ tldr pyenv&lt;/code> for it.&lt;/p>
&lt;p>&lt;strong>pyenv&lt;/strong>&lt;/p>
&lt;p>&lt;strong>Switch between multiple versions of Python easily.&lt;/strong>
&lt;strong>More information: &lt;a href="https://github.com/pyenv/pyenv">https://github.com/pyenv/pyenv&lt;/a>.&lt;/strong>&lt;/p></description></item></channel></rss>